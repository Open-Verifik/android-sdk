package co.mat.verifikkit;

import android.content.Context;

import com.facetec.sdk.FaceTecIDScanResult;
import com.facetec.sdk.FaceTecSDK;
import com.facetec.sdk.FaceTecSessionResult;

public class Verifik {
    private Context context;
    private VerifikCallback verifikCallback;
    private String token;
    private Processor latestProcessor;
    private FaceTecSessionResult latestSessionResult;
    private FaceTecIDScanResult latestIDScanResult;
    private String latestExternalDatabaseRefID = "";

    public Verifik(Context context, String token, VerifikCallback verifikCallback){
        this.context = context;
        this.token = token;
        this.verifikCallback = verifikCallback;

        HttpService service = new HttpService();
        service.getCredentials(token,context.getPackageName(), new HttpService.CredentialsCallback() {
            @Override
            public void finishConfig(String prodKeyText, String deviceKeyIdentifier, String publicFaceScanEncryptionKey) {

                Config shared = new Config(VerifikURL.Base,deviceKeyIdentifier,publicFaceScanEncryptionKey,prodKeyText);
                shared.initializeFaceTecSDKFromAutogeneratedConfig(context, new FaceTecSDK.InitializeCallback() {
                    @Override
                    public void onCompletion(boolean initializationSuccesful) {
                        if (initializationSuccesful) {
                            verifikCallback.initVerifikSuccess();
                        }
                    }
                });
                //TODO customization
                // Set your FaceTec Device SDK Customizations.
                String currentTheme = Config.wasSDKConfiguredWithConfigWizard ? "Config Wizard Theme" : "FaceTec Theme";
                ThemeHelpers.setAppTheme(context, currentTheme);
                // Set the strings to be used for group names, field names, and placeholder texts for the FaceTec ID Scan User OCR Confirmation Screen.
                VerifikUtils.setOCRLocalization(context);
                // Set the FaceTec Customization defined in the Config File.
                VerifikAudioUtilities.setVocalGuidanceSoundFiles();
                VerifikAudioUtilities utils = new VerifikAudioUtilities();
                utils.setUpVocalGuidancePlayers(context);
            }

            @Override
            public void configError(String error) {
                verifikCallback.configError(error);
            }
        });
    }

    public void enroll(String externalDatabaseRefID){
        this.latestExternalDatabaseRefID = externalDatabaseRefID;
        HttpService service = new HttpService();
        service.getSessionToken(token, new HttpService.SessionCallback() {
            @Override
            public void obtainedSession(String sessionToken) {
                resetResults();
                latestProcessor = new EnrollmentProcessor(context, sessionToken, token, externalDatabaseRefID, verifikCallback);
            }

            @Override
            public void sessionError(String error) {
                verifikCallback.sessionError(error);
            }
        });
    }

    public void authenticate(String externalDatabaseRefID){
        this.latestExternalDatabaseRefID = externalDatabaseRefID;
        HttpService service = new HttpService();
        service.getSessionToken(token, new HttpService.SessionCallback() {
            @Override
            public void obtainedSession(String sessionToken) {
                resetResults();
                latestProcessor = new AuthenticateProcessor(context, sessionToken, token, externalDatabaseRefID, verifikCallback);
            }

            @Override
            public void sessionError(String error) {
                verifikCallback.sessionError(error);
            }
        });
    }

    public void matchIDScan(String externalDatabaseRefID){
        this.latestExternalDatabaseRefID = externalDatabaseRefID;
        HttpService service = new HttpService();
        service.getSessionToken(token, new HttpService.SessionCallback() {
            @Override
            public void obtainedSession(String sessionToken) {
                resetResults();
                latestProcessor = new PhotoIDMatchProcessor(context, sessionToken, token, externalDatabaseRefID, verifikCallback);
            }

            @Override
            public void sessionError(String error) {
                verifikCallback.sessionError(error);
            }
        });
    }

    public void photoIDScan(String externalDatabaseRefID){
        this.latestExternalDatabaseRefID = externalDatabaseRefID;
        HttpService service = new HttpService();
        service.getSessionToken(token, new HttpService.SessionCallback() {
            @Override
            public void obtainedSession(String sessionToken) {
                resetResults();
                latestProcessor = new PhotoIDScanProcessor(context, sessionToken, token, externalDatabaseRefID, verifikCallback);
            }

            @Override
            public void sessionError(String error) {
                verifikCallback.sessionError(error);
            }
        });
    }

    public void appRegistrationKYC(String project, String email, String phone){
        HttpService service = new HttpService();
        service.getSessionToken(token, new HttpService.SessionCallback() {
            @Override
            public void obtainedSession(String sessionToken) {
                resetResults();
                latestProcessor = new VerifikAppRegisterProcessor(context, sessionToken, token, project, email, phone, verifikCallback);
            }

            @Override
            public void sessionError(String error) {
                verifikCallback.sessionError(error);
            }
        });
    }

    public void appLoginKYC(String project, String email, String phone){
        HttpService service = new HttpService();
        service.getSessionToken(token, new HttpService.SessionCallback() {
            @Override
            public void obtainedSession(String sessionToken) {
                resetResults();
                latestProcessor = new VerifikAppLoginProcessor(context, sessionToken, token, project, email, phone, verifikCallback);
            }

            @Override
            public void sessionError(String error) {
                verifikCallback.sessionError(error);
            }
        });
    }

    public void appPhotoIDScanKYC(String project, VerifikDocType type){
        HttpService service = new HttpService();
        service.getSessionToken(token, new HttpService.SessionCallback() {
            @Override
            public void obtainedSession(String sessionToken) {
                resetResults();
                latestProcessor = new VerifikAppIDScanProcessor(context, sessionToken, token, project, type, verifikCallback);
            }

            @Override
            public void sessionError(String error) {
                verifikCallback.sessionError(error);
            }
        });
    }

    private void resetResults(){
        latestSessionResult = null;
        latestIDScanResult = null;
    }
}

